theory Enhance_handshake
begin
//Tamarin builtin functions
builtins: symmetric-encryption,hashing
//user define functions
functions: PRF/2, password/0[private]

/* We formalize the following PreShared Four_Way_HandShake handshake.

  protocol FWH {
    1. A -> S: A,S,ANonce

    2. A <- S: S, A, SNonce,h(ANonce,SNonce,PTK)

    3. A -> S: ANonce,h(ANonce,PTK)

    4. A <- S: h(SNonce,PTK)
  }
*/

//Password share infrastructure
rule Share_Password:
[]
-->
[ !PWD($A, password)]

// Compromising an agent's password
rule Reveal_Password:
[!PWD(A,password)]--[Reveal(A)]->
[Out(password)]

// Initialize Role AP
rule Init_A:
[ Fr(~id),!PWD($A, password),!PWD($S, password)]
--[ Create($A, ~id), Role('A'),Neq($A,$S)]->
[ St_A_1($A, ~id,$S)]

// Initialize Role STA
rule Init_S:
[ Fr(~id),!PWD($A, password),!PWD($S, password)]
--[ Create($S, ~id), Role('S'),Neq($A,$S) ]->
[ St_B_1($S, ~id, $A)]


// Role AP sends first message
rule A_1send:
[  St_A_1(A,~id,S),Fr(~ANonce),!PWD(A, password)]
--[ Role('A'),Send(A,~ANonce)]->
[Out(senc(<A,S,~ANonce>,password)),St_A_2(A,~id,S,~ANonce)]


// Role STA receives first message and sends second message
rule S_1receive_2send:
let 
    PTK = PRF(password,<ANonce,~SNonce,A,S>)
    MIC = h(<ANonce,~SNonce,A,S,PTK>)                                    
in
[St_B_1(S, ~id, A),Fr(~SNonce)
,In(senc(<A,S,ANonce>,password)),!PWD(S, password)]
--[ Recv(S,ANonce),DoSProtection(A,ANonce),Role('S'),OnlyOnce()]->
[Out(senc(<S, A,~SNonce, MIC>,password)),ST_B_2(S, ~id, A,ANonce,~SNonce,PTK)]

// Role AP receives second message and sends third message
rule A_2receive_3send:
let 
    PTK = PRF(password,<~ANonce,SNonce,A,S>)
    MIC1 = h(<~ANonce,SNonce,A,S,PTK>)                  
    MIC2 = h(<~ANonce,A,S,PTK>)                
in
[In(senc(<S,A,SNonce, MIC>,password)),St_A_2(A,~id,S,~ANonce)
,!PWD(A, password)]
--[ Neq(~ANonce,SNonce),Role('A'),Eq(MIC,MIC1)
   ,Running(S,A,<'STA',PTK>)]->
[Out(senc(<A,S,~ANonce,MIC2>,PTK)),ST_A_3(A,~id,S,~ANonce,SNonce,PTK)]

// Role STA receives third message and sends fourth message
rule S_3receive_4send:
let 
    MIC1= h(<ANonce,A,S,PTK>)   
    MIC2= h(<~SNonce,A,S,PTK>)
in
[In(senc(<A,S,ANonce,MIC>,PTK)),ST_B_2(S, ~id, A,ANonce,~SNonce,PTK)]
--[Secret(A,S,PTK),Role('S'),Eq(MIC,MIC1)
  ,Commit(S,A,<'STA',PTK>),Running(A,S,<'AP',PTK>)]->
[Out(senc(<S,A,MIC2>,PTK))]

//Role AP receives fourth message
rule A_4receive:
let 
       MIC1= h(<SNonce,A,S,PTK>)
in
[In(senc(<S,A,MIC>,PTK)),ST_A_3(A,~id,S,~ANonce,SNonce,PTK)]
--[Secret(A,S,PTK),Finshed(),Role('A')
  ,Eq(MIC,MIC1),Commit(A,S,<'AP',PTK>)]->
[]

//considering only those traces that received message is consistent with the expected receive message
restriction Equality:
"All x y #i. Eq(x,y) @i ==> x = y"

//considering only those traces that STA and AP generate different random nonces
restriction Inequality:
"All x #i. Neq(x,x) @ #i ==> F"

restriction OnlyOnce: 
	"All #i #j. OnlyOnce()@i & OnlyOnce()@j ==> #i = #j"

lemma Dos_protection: 
	"All b m #i. DoSProtection(b,m) @i ==> (Ex #j. Send(b,m) @j & j<i) | (Ex B #r. Reveal(B)@r & r < i)"
end
